<!doctype html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quiz - Gestion des Conflits</title>
    <style>
      body {
        font-family: "Poppins", sans-serif;
        margin: 0;
        padding: 0;
        background: #f0f4f8;
        color: #333;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
      }
      .quiz-container {
        max-width: 600px;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
      }
      h2 {
        color: #007bff;
        margin-bottom: 20px;
      }
      .question {
        margin-bottom: 20px;
        font-weight: bold;
        font-size: 18px;
      }
      .answers {
        list-style-type: none;
        padding: 0;
      }
      .answers li {
        margin-bottom: 10px;
        transition: 0.3s;
        cursor: pointer;
        padding: 10px;
        border-radius: 5px;
      }
      .answers li:hover {
        background-color: #f0f8ff;
      }
      .selected {
        background-color: #e0f7fa; /* Highlighted background */
        border: 1px solid #007bff; /* Border around the selected option */
      }
      .btn {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        border: none;
        margin-top: 20px;
        transition: 0.3s;
      }
      .btn:hover {
        background-color: #0056b3;
      }
      .result {
        font-size: 18px;
        font-weight: bold;
        margin-top: 20px;
      }
      .feedback {
        margin-top: 10px;
        font-size: 16px;
        font-weight: normal;
      }
    </style>
  </head>
  <body>
    <div class="quiz-container">
      <h2>Quiz - Comprendre les Origines des Conflits</h2>

      <div id="question-container">
        <!-- Les questions seront inject√©es ici dynamiquement -->
      </div>

      <button class="btn" id="submitBtn" onclick="submitQuiz()">
        Soumettre les r√©ponses
      </button>

      <div id="quiz-result" class="result" style="display: none"></div>
    </div>

    <script>
      const questions = [
        {
          question:
            "Quel est le principal facteur pouvant conduire √† un conflit avec un client √† distance ?",
          answers: [
            { text: "üö® Probl√®mes techniques", correct: true },
            { text: "üì¶ Attentes non satisfaites", correct: false },
            { text: "üì¢ Manque de communication", correct: false },
            { text: "üò° √âtat √©motionnel du client", correct: false },
          ],
        },
        {
          question:
            "Quel comportement est essentiel pour g√©rer un conflit efficacement ?",
          answers: [
            { text: "ü§´ Silence actif", correct: false },
            { text: "‚úÖ Reformuler", correct: true },
            { text: "üìù Ignorer l'√©motion", correct: false },
            { text: "üí¨ Parler rapidement", correct: false },
          ],
        },
        {
          question:
            "Comment peut-on pr√©venir un conflit avant qu'il ne se produise ?",
          answers: [
            { text: "üìä Anticiper les attentes", correct: true },
            { text: "üí° √âcouter uniquement", correct: false },
            { text: "üìú Ignorer les plaintes", correct: false },
            { text: "üéì Ne rien changer", correct: false },
          ],
        },
        {
          question:
            "Pourquoi est-il important de montrer de l'empathie lors d'un conflit avec un client ?",
          answers: [
            {
              text: "üí° Pour r√©duire la tension et comprendre le probl√®me",
              correct: true,
            },
            { text: "üëÄ Parce que √ßa montre de la faiblesse", correct: false },
            { text: "üò° Pour se faire respecter", correct: false },
            { text: "üïµÔ∏è‚Äç‚ôÄÔ∏è Pour enqu√™ter davantage", correct: false },
          ],
        },
        {
          question: "Quel type de question permet de clarifier un malentendu ?",
          answers: [
            { text: "üîë Question ferm√©e", correct: false },
            { text: "‚ùì Question ouverte", correct: true },
            { text: "‚ùó Question suggestive", correct: false },
            { text: "üí≠ Question rh√©torique", correct: false },
          ],
        },
        {
          question: "Qu'est-ce qui peut aider √† apaiser un client en col√®re ?",
          answers: [
            { text: "üôã‚Äç‚ôÇÔ∏è Rester calme et √©couter attentivement", correct: true },
            { text: "üó£Ô∏è Parler de mani√®re autoritaire", correct: false },
            { text: "ü§î Ignorer ses plaintes", correct: false },
            { text: "üëé R√©pondre avec de l'ironie", correct: false },
          ],
        },
        {
          question:
            "Comment peut-on √©viter que le client per√ßoive le service comme √©tant impersonnel ?",
          answers: [
            {
              text: "üí¨ Utiliser des messages standards √† chaque fois",
              correct: false,
            },
            {
              text: "üë• Personnaliser les interactions et montrer de l'empathie",
              correct: true,
            },
            { text: "üîí Rester strict sur les r√®gles", correct: false },
            { text: "üìû Ignorer les besoins sp√©cifiques", correct: false },
          ],
        },
        {
          question: "Que signifie l'√©coute active ?",
          answers: [
            { text: "üìù R√©citer des informations", correct: false },
            {
              text: "ü§î Reformuler ce que le client dit pour montrer que l'on comprend",
              correct: true,
            },
            { text: "‚è±Ô∏è R√©pondre imm√©diatement", correct: false },
            {
              text: "üîá Rester silencieux et attendre la r√©ponse",
              correct: false,
            },
          ],
        },
        {
          question:
            "Lors d'un conflit, pourquoi est-il important de reformuler ce que dit le client ?",
          answers: [
            {
              text: "üí° Pour s'assurer d'avoir bien compris et √©viter les malentendus",
              correct: true,
            },
            { text: "üì¶ Pour faire une pause", correct: false },
            { text: "üó£Ô∏è Pour l'interrompre", correct: false },
            { text: "‚ö†Ô∏è Pour donner une r√©ponse plus rapide", correct: false },
          ],
        },
        {
          question: "Comment peut-on anticiper les conflits avec un client ?",
          answers: [
            {
              text: "üí¨ En fournissant des informations claires d√®s le d√©but",
              correct: true,
            },
            { text: "‚è≥ En √©tant distant et rapide", correct: false },
            {
              text: "üôà En ne communiquant que lorsqu'on est oblig√©",
              correct: false,
            },
            { text: "üîí En imposant des solutions", correct: false },
          ],
        },
      ]

      let currentQuestionIndex = 0
      let userAnswers = []
      let score = 0
      let selectedAnswers = []

      // Shuffle function to randomize the questions
      function shuffleQuestions() {
        let shuffledQuestions = [...questions] // Copy the questions array
        for (let i = shuffledQuestions.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1))
          ;[shuffledQuestions[i], shuffledQuestions[j]] = [
            shuffledQuestions[j],
            shuffledQuestions[i],
          ] // Swap positions
        }
        return shuffledQuestions.slice(0, 5) // Return the first 5 questions
      }

      function displayQuestion() {
        const questionContainer = document.getElementById("question-container")
        const questionData = shuffledQuestions[currentQuestionIndex]

        questionContainer.innerHTML = `
            <div class="question">
                <p>${questionData.question}</p>
                <ul class="answers">
                    ${questionData.answers
                      .map(
                        (answer, index) => `
                        <li class="answer-item" onclick="selectAnswer(${index})">
                            ${answer.text}
                        </li>
                    `,
                      )
                      .join("")}
                </ul>
            </div>
            <div id="feedback" class="feedback"></div>
        `
      }

      function selectAnswer(index) {
        const answerItems = document.querySelectorAll(".answer-item")
        answerItems.forEach((item) => item.classList.remove("selected")) // Remove previously selected
        // Add the 'selected' class to the clicked answer
        answerItems[index].classList.add("selected")

        const correctAnswer =
          shuffledQuestions[currentQuestionIndex].answers[index].correct
        const feedback = document.getElementById("feedback")

        if (correctAnswer) {
          feedback.textContent = "‚úÖ Bonne r√©ponse!"
          feedback.style.color = "green"
        } else {
          feedback.textContent = "‚ùå Mauvaise r√©ponse."
          feedback.style.color = "red"
        }

        selectedAnswers[currentQuestionIndex] = correctAnswer // Store the selected answer
      }

      function submitQuiz() {
        // If it's the last question, show the result
        if (currentQuestionIndex === shuffledQuestions.length - 1) {
          score = selectedAnswers.filter((answer) => answer).length
          const resultDiv = document.getElementById("quiz-result")
          resultDiv.style.display = "block"

          if (score === shuffledQuestions.length) {
            resultDiv.textContent = `Bravo ! Vous avez obtenu ${score} / ${shuffledQuestions.length} bonnes r√©ponses.`
            resultDiv.style.color = "green"
          } else if (score >= shuffledQuestions.length / 2) {
            resultDiv.textContent = `Bien jou√© ! Vous avez obtenu ${score} / ${shuffledQuestions.length} bonnes r√©ponses.`
            resultDiv.style.color = "orange"
          } else {
            resultDiv.textContent = `Il y a des points √† am√©liorer. Vous avez obtenu ${score} / ${shuffledQuestions.length} bonnes r√©ponses.`
            resultDiv.style.color = "red"
          }

          // Change button to "Rejouer"
          const submitBtn = document.getElementById("submitBtn")
          submitBtn.textContent = "Rejouer"
          submitBtn.setAttribute("onclick", "restartQuiz()")
        } else {
          currentQuestionIndex++
          displayQuestion()
        }
      }

      function restartQuiz() {
        // Reset everything
        currentQuestionIndex = 0
        selectedAnswers = []
        score = 0
        document.getElementById("quiz-result").style.display = "none"
        document.getElementById("submitBtn").textContent =
          "Soumettre les r√©ponses"
        document
          .getElementById("submitBtn")
          .setAttribute("onclick", "submitQuiz()")
        shuffledQuestions = shuffleQuestions() // Shuffle the questions again
        displayQuestion()
      }

      // Start the quiz
      let shuffledQuestions = shuffleQuestions() // Get shuffled questions
      displayQuestion()
    </script>
  </body>
</html>
